#!/usr/local/bin/python3.7

import boto3
import datetime
import time
import random
import copy
import os
import re

def atoi(text):
    return int(text) if text.isdigit() else text

def natural_keys(text):
    return [ atoi(c) for c in re.split(r'(\d+)', text) ]


today = datetime.date.today()
today_string = time.strftime('%Y-%m-%d.%H%M%S')

print (today_string)

ec2_client = boto3.client('ec2','{REGION}')
ec2_resource = boto3.resource('ec2','{REGION}')


instances = ec2_resource.instances.filter(
        Filters = [ {'Name' : 'tag:Name', 'Values' : [ '{INSTANCE_NAME_TAG}' ]},
                    {'Name' : 'instance-state-name', 'Values' : [ 'running' ]}
         ]
    )

ec2_list = []

for instance in instances:
    ec2_list.append(instance.id)
print (ec2_list)

ec2_instance = random.choice(ec2_list)
print (ec2_instance)

image = ec2_client.create_image(
    InstanceId=ec2_instance,
    Name="{AMI_TAG_NAME} " + today_string,
    Description="{AMI_TAG_NAME} " + today_string,
    NoReboot=True,
    DryRun=False)

image_resource = ec2_resource.Image(
                                image['ImageId'])

image_resource.create_tags(Tags=[ { 'Key': 'Name', 'Value': '{AMI_TAG_NAME} ' + today_string },
                                  { 'Key': 'Compliance', 'Value': 'HIPAA' },
                                  { 'Key': 'Cost Center', 'Value': 'V2' },
                                  { 'Key': 'env', 'Value': '{ENV}' },
                                  { 'Key': 'Use', 'Value': '{USE}' }                                
                                ])

time.sleep( 30 )

block_devices = copy.deepcopy(image_resource.block_device_mappings)
print (block_devices)

for snap in block_devices:
    if not 'Ebs' in snap:
        continue
    snapshot_id = snap['Ebs']['SnapshotId']
    print (snapshot_id)
    snapshot = ec2_resource.Snapshot(snapshot_id)
    print (snapshot)
    
    ec2_client.create_tags(Resources=[snapshot_id,],Tags=[ { 'Key': 'Name', 'Value': '{AMI_TAG_NAME} ' + today_string },
                                  { 'Key': 'Compliance', 'Value': 'HIPAA' },
                                  { 'Key': 'env', 'Value': '{ENV}' },                        
                                  { 'Key': 'Cost Center', 'Value': 'V2' },
                                  { 'Key': 'Use', 'Value': '{USE}' }                                
                                ])


ami_image_id = list(map(lambda i: i['ImageId'], ec2_client.describe_images(
    Filters = [ {'Name' : 'tag:Name', 'Values' : [ '{AMI_TAG_NAME} ' + today_string ]},
  ] 
    )['Images']))

aws_ami_image_id = (' ' .join(ami_image_id))

print (aws_ami_image_id)

describe_templates = ec2_client.describe_launch_templates(
    LaunchTemplateNames=[
        '{LAUNCH_TEMPLATE_NAME}',
    ],
)

print (describe_templates)


launch_template_id = describe_templates.get('LaunchTemplates')[0]['LaunchTemplateId']

version_description = ('{AMI_TAG_NAME} ' + today_string)


update_launch_template = ec2_client.create_launch_template_version(
    LaunchTemplateId=launch_template_id,
    SourceVersion="$Latest",
    VersionDescription=version_description,
            LaunchTemplateData={
                "ImageId": aws_ami_image_id
            }
        )

print (update_launch_template)

current_version_number = describe_templates.get('LaunchTemplates')[0]['LatestVersionNumber']

print (current_version_number)

modify_launch_template = ec2_client.modify_launch_template(
            LaunchTemplateId=launch_template_id,
            DefaultVersion="$Latest"
        )
        
print (modify_launch_template)


ami_image_name = list(map(lambda i: i['Name'], ec2_client.describe_images(
    Filters = [ {'Name' : 'tag:Name', 'Values' : [ '{AMI_TAG_NAME}*' ]},
  ] 
    )['Images']))

celltrak_ami_image_name = (' ' .join(ami_image_name))

ami_image_list = []

for ami in ami_image_name:
    ami_image_list.append(ami)
print (ami_image_list)

ami_image_list.sort(key=natural_keys)


if len(ami_image_list) > 3:
    result = [ ami_image_list[0] ]
    result_image = (' ' .join(result))
    print (result_image)

    result_ami_name = list(map(lambda i: i['ImageId'], ec2_client.describe_images(
        Filters=[
                 {
                   'Name' : 'tag:Name',
                   'Values' : [ result_image ]
                 },
       ] 
    )['Images']))
    
    aws_ami_purge = (' ' .join(result_ami_name))
    
    print (aws_ami_purge)

    result_launch_template_version = ec2_client.describe_launch_template_versions(
        DryRun=False,
        LaunchTemplateId=launch_template_id,
        Filters=[
                 {
                    'Name': 'image-id',
                    'Values': [aws_ami_purge]
                 }
        ]
    )

    print (result_launch_template_version)
    
    aws_launch_template_version = result_launch_template_version.get('LaunchTemplateVersions')[0]['VersionNumber']
    
    print (aws_launch_template_version)
    
    aws_purge_old_launch_template_version = ec2_client.delete_launch_template_versions(
       DryRun=False,
       LaunchTemplateId=launch_template_id,
       Versions=[
                  str(aws_launch_template_version)
     ] 
   )
    
    print (aws_purge_old_launch_template_version)
    
    
    aws_deregister_ami = ec2_client.deregister_image(
       ImageId=celltrak_ami_purge,
       DryRun=False
   )
    
    print (aws_deregister_ami)
    
    aws_ami_snapshots = ec2_client.describe_snapshots(Filters=[{'Name': 'tag:Name', 'Values': [ result_image ]}])
    
    
    for snapshot in aws_ami_snapshots['Snapshots']:
            delete_snapshots = (snapshot['SnapshotId'])
            print (delete_snapshots)
            
            delete = ec2_client.delete_snapshot(
                                                   SnapshotId=delete_snapshots,
                                                   DryRun=False)
            
            print (delete)
